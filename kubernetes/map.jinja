# -*- coding: utf-8 -*-
# vim: ft=jinja

{%- set tplroot = tpldir.split('/')[0] %}
{#- Start imports as #}
{%- import_yaml tplroot ~ "/defaults.yaml" as default_settings %}
{%- import_yaml tplroot ~ "/osfamilymap.yaml" as osfamilymap %}
{%- import_yaml tplroot ~ "/osarchmap.yaml" as osarchmap %}

{#- Retrieve the config dict only once #}
{%- set _config = salt['config.get'](tplroot, default={}) %}

{%- set defaults = salt['grains.filter_by'](
      default_settings,
      default=tplroot,
      merge=salt['grains.filter_by']( osfamilymap, grain='os_family',
        merge=salt['grains.filter_by']( osarchmap, grain='osarch',
          merge=salt['grains.filter_by']( _config, default='lookup'
          )
        )
      )
    )
 %}
{%- set k = salt['grains.filter_by']( {'defaults': defaults}, default='defaults', merge=_config) %}

{%- for comp in k.supported %}
    {%- if 'use_upstream_binary' in k[comp]['pkg'] and k[comp]['pkg']['use_upstream_binary'] %}
        {%- set dirname = comp + '-v%s'|format(k[comp]['version']) %}

        {%- if comp == 'kubectl' %}
            {%- set uri = '%s/v%s/bin/%s/%s'|format(k[comp]['pkg']['binary']['uri'], k[comp]['version'],
                                                    grains.kernel|lower, k.arch) %}
        {%- elif comp == 'minikube' %}
            {%- set uri = '%s/v%s/%s-%s-%s'|format(k[comp]['pkg']['binary']['uri'], k[comp]['version'],
                                                    comp, grains.kernel|lower, k.arch) %}
        {%- elif comp == 'devspace' %}
            {%- set uri = '%s/v%s/%s-%s-%s'|format(k[comp]['pkg']['binary']['uri'], k[comp]['version'],
                                                    comp, grains.kernel|lower, k.arch) %}
        {%- endif %}

        {%- if 'source_hash' in k[comp]['pkg']['binary'] and k[comp]['pkg']['binary']['source_hash'] %}
            {%- do k[comp]['pkg']['binary'].update({'source_hash': k[comp]['pkg']['binary']['source_hash']}) %}
        {%- else %}
            {%- do k[comp]['pkg']['binary'].update({'source_hash': uri ~ '.sha256'}) %}
        {%- endif %}

        {%- do k[comp]['pkg']['binary'].update({
               'name':    k.dir.binary + '/' + dirname,
               'basedir': k.dir.binary + '/' + dirname,
               'source':  uri if comp in ('minikube', 'devspace') else uri + '/' + k[comp]['pkg']['name']
        }) %}
    {%- endif %}

    {%- if 'use_upstream_source' in k[comp]['pkg'] and k[comp]['pkg']['use_upstream_source'] %}
        {%- set dirname = '%s-%s'|format(k[comp]['pkg']['source']['name'], k[comp]['version']) %}
        {%- if comp == 'kubectl' %}
            {%- set uri = k[comp]['pkg']['source']['uri'] + '/' + dirname %}
        {%- else %}
            {%- set uri = k[comp]['pkg']['source']['uri'] + '/v' + k[comp]['version'] %}
        {%- endif %}
        {%- do k[comp]['pkg']['source'].update({
               'name':    k.dir.source + '/' + dirname,
               'basedir': k.dir.source + '/' + k[comp]['pkg']['source']['name'] + dirname,
               'source':  uri + '.' + k[comp]['pkg']['source']['archive_suffix'],
               'archive_format': k[comp]['pkg']['source']['archive_format']
        }) %}
    {%- endif %}
{%- endfor %}

{%- set kubernetes = k %}
