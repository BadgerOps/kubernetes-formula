# -*- coding: utf-8 -*-
# vim: ft=jinja

{%- set tplroot = tpldir.split('/')[0] %}
{%- import_yaml tplroot ~ "/defaults.yaml" as default_settings %}
{%- import_yaml tplroot ~ "/osfamilymap.yaml" as osfamilymap %}
{%- import_yaml tplroot ~ "/osfingermap.yaml" as osfingermap %}
{%- import_yaml tplroot ~ "/osmap.yaml" as osmap %}
{%- import_yaml tplroot ~ "/osarchmap.yaml" as osarchmap %}

{%- set _config = salt['config.get'](tplroot, default={}) %}
{%- set defaults = salt['grains.filter_by'](
      default_settings,
      default=tplroot,
      merge=salt['grains.filter_by']( osfamilymap, grain='os_family',
        merge=salt['grains.filter_by']( osmap, grain='os',
          merge=salt['grains.filter_by']( osfingermap, grain='osfinger',
            merge=salt['grains.filter_by']( osarchmap, grain='osarch',
              merge=salt['grains.filter_by']( _config, default='lookup'
              )
            )
          )
        )
      )
    )
 %}
{%- set d = salt['grains.filter_by']( {'defaults': defaults}, default='defaults', merge=_config) %}

{%- for comp in d.supported %}
    {%- set dirname = 'kubernetes' %}
    {%- if 'version' in d[comp] %}
        {%- set dirname = dirname ~ '-' ~ comp ~ '-v%s'|format(d[comp]['version']) %}
    {%- endif %}

    {%- if 'use_upstream_archive' in d[comp]['pkg'] and d[comp]['pkg']['use_upstream_archive'] %}

        {%- if comp in ('client', 'server', 'node') %}
            {%- set uri = '%s/v%s/kubernetes-%s-%s-%s.%s'|format(d[comp]['pkg']['archive']['uri'],
                           d[comp]['version'], comp, grains.kernel|lower, d.arch, d[comp]['pkg']['suffix']) %}
        {%- elif comp == 'kubebuilder' %}
            {%- set uri = '%s/v%s/%s_%s_%s_%s.%s'|format(d[comp]['pkg']['archive']['uri'], d[comp]['version'],
                          comp, d[comp]['version'], grains.kernel|lower, d.arch, d[comp]['pkg']['suffix']) %}
        {%- elif comp in ('istio') %}
            {%- set uri = '%s/%s/%s-%s-%s-%s.%s'|format(d[comp]['pkg']['archive']['uri'], d[comp]['version'],
                          comp, d[comp]['version'], grains.kernel|lower, d.arch, d[comp]['pkg']['suffix']) %}
        {%- elif comp == 'octant' %}
            {%- set kernel = 'macOS' if grains.kernel == 'Darwin' else grains.kernel %}
            {%- set arch = '64bit' if d.arch in ('x86_64', 'amd64') else d.arch %}
            {%- set arch = 'arm' if d.arch|lower in ('arm',) else d.arch %}
            {%- set arch = 'arm64' if d.arch|lower in ('arm64',) else d.arch %}
            {%- set uri = '%s/v%s/%s_%s_%s-%s.%s'|format(d[comp]['pkg']['archive']['uri'], d[comp]['version'],
                          comp, d[comp]['version'], kernel, arch, d[comp]['pkg']['suffix']) %}
        {%- endif %}

        {%- if 'source_hash' not in d[comp]['pkg']['archive'] %}
            {%- do d[comp]['pkg']['archive'].update({'source_hash': uri ~ '.sha256'}) %}
        {%- endif %}
        {%- do d[comp]['pkg']['archive'].update({ 'name': d.dir.archive + '/' + dirname, 'source': uri }) %}

    {%- elif 'use_upstream_binary' in d[comp]['pkg'] and d[comp]['pkg']['use_upstream_binary'] %}
        {%- if comp in ('client', 'server', 'node') %}
            {%- set uri = '%s/v%s/bin/%s/%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                      grains.kernel|lower, d.arch) %}
        {%- elif comp in ('minikube', 'devspace', 'kind') %}
            {%- set uri = '%s/v%s/%s-%s-%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                     comp, grains.kernel|lower, d.arch) %}
        {%- elif comp in ('linkerd2',) %}
            {%- set uri = '%s/edge-%s/linkerd2-cli-edge-%s-%s'|format(d[comp]['pkg']['binary']['uri'],
                                                      d[comp]['version'], d[comp]['version'], d.arch) %}
        {%- elif comp == 'kudo' %}
            {%- set arch = 'x86_64' if d.arch == 'amd64' else d.arch %}
            {%- set uri = '%s/v%s/kubectl-%s_%s_%s_%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                         comp, d[comp]['version'], grains.kernel|lower, arch) %}
        {%- elif comp == 'k3s' %}
            {%- set arch = '' if d.arch == 'amd64' else d.arch %}
            {%- set uri = '%s/v%s/%s-%s-%s'|format(d[comp]['pkg']['binary']['uri'], d[comp]['version'],
                                                    comp, grains.kernel|lower, arch) %}
        {%- endif %}

        {%- if 'source_hash' not in d[comp]['pkg']['binary'] %}
            {%- do d[comp]['pkg']['binary'].update({'source_hash': uri ~ '.sha256'}) %}
        {%- endif %}
        {%- set fallback_url = uri + '/' + d[comp]['pkg']['name'] %}

        {%- do d[comp]['pkg']['binary'].update({
            'name': d.dir.binary + '/' + dirname,
            'source': uri if comp in ('minikube', 'devspace', 'kudo', 'kind') else fallback_url }) %}

    {%- endif %}
    {%- if comp == 'client' and 'libs' in d[comp] and 'wanted' in d[comp]['libs'] and d[comp]['libs']['wanted'] %}
        {%- for lib in d[comp]['libs']['wanted'] %}
            {%- if lib in d[comp]['libs'] and d[comp]['libs'][lib] %}
                {%- set name = '' if 'name' not in d[comp]['libs'][lib] else d[comp]['libs'][lib]['name'] %}
                {%- set uri = '%s/%s/archive/%s%s.tar.gz'|format(d[comp]['libs']['uri'], lib, name,
                                                                 d[comp]['libs'][lib]['version']) %}
                {%- do d[comp]['libs'][lib].update({'source': uri }) %}
            {%- endif %}
        {%- endfor %}
    {%- endif %}
{%- endfor %}

{%- set data = d %}
