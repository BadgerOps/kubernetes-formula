# -*- coding: utf-8 -*-
# vim: ft=yaml
#
# Setup variables using grains['os_family'] based logic.
# You just need to add the key:values for an `os_family` that differ
# from `defaults.yaml`.
# Only add an `os_family` which is/will be supported by the formula
#
# If you do not need to provide defaults via the `os_family` grain,
# you will need to provide at least an empty dict in this file, e.g.
# osfamilymap: {}
---
{%- if grains.os == 'MacOS' %}
    {%- set macos_rootuser = salt['cmd.run']("stat -f '%Su' /dev/console") %}
    {%- set macos_rootgroup = salt['cmd.run']("stat -f '%Sg' /dev/console") %}
{%- endif %}

Debian:
  pkg:
    repo:
      name: deb https://apt.kubernetes.io/ kubernetes-xenial main
      file: /etc/apt/sources.list.d/kubernetes.list
      key_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
  kubectl:
    pkg:
      use_upstream_repo: True
      use_upstream_binary: False
      use_upstream_source: False
  minikube:
    pkg:
      use_upstream_repo: False
      use_upstream_binary: True
      use_upstream_source: False

RedHat:
  pkg:
    repo:
      baseurl: 'https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64'
      gpgkey: 'https://packages.cloud.google.com/yum/doc/yum-key.gpg gpgkey2=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg'
      repo_gpgcheck: 1
  kubectl:
    pkg:
      use_upstream_repo: True
      use_upstream_binary: False

Suse:
  kubectl:
    pkg:
      use_upstream_repo: False
      use_upstream_binary: True
      use_upstream_source: False
  minikube:
    pkg:
      use_upstream_repo: False
      use_upstream_binary: True
      use_upstream_source: False

Gentoo: {}

Arch: {}

Alpine: {}

FreeBSD:
  rootgroup: wheel
  kubectl:
    pkg:
      use_upstream_source: True
      use_upstream_repo: False
      use_upstream_binary: False
  minikube:
    pkg:
      use_upstream_source: True
      use_upstream_repo: False
      use_upstream_binary: False

OpenBSD:
  rootgroup: wheel
  kubectl:
    pkg:
      use_upstream_source: True
      use_upstream_repo: False
      use_upstream_binary: False
  minikube:
    pkg:
      use_upstream_source: True
      use_upstream_repo: False
      use_upstream_binary: False

Windows:
  dir:
    binary: C:\\kubernetes
    source: C:\\temp\\kubernetes
  kubectl:
    check: systeminfo
    pkg:
      name: kubectl.exe
      binary:
        source_hash: d617596d9f00dae9ede45c650aea020f4b4237a7341d0ba9ac9acf1b1e380ad5   #kubectl.exe 
  minikube:
    pkg:
      name: minikube-windows-amd64.exe
      binary:
        source_hash: f6c30cb88ec61bc6fe17532a3ef56e4f1fcef2473e3d73fc56f352b44784490d

MacOS:
  rootuser: {{ macos_rootuser | d('') }}
  rootgroup: {{ macos_rootgroup | d('') }}
  kubectl:
    pkg:
      name: kubernetes-cli         #homebrew
      use_upstream_repo: True      #homebrew
      use_upstream_binary: False   #binary
      binary:
        source_hash: 63f1ace419edffa1f5ebb64a6c63597afd48f8d94a61d4fb44e820139adbbe54   #kubectl binary amd64
  minikube:
    check: sysctl -a | grep machdep.cpu.features
    pkg:
      name: minikube               #homebrew
      use_upstream_repo: False     #homebrew
      use_upstream_binary: True   #binary
      binary:
        source_hash: 183d017d094b7783c938dc709dbdfc9a48f92299178234f89047dfbb083a592c  #minikube binary amd64
