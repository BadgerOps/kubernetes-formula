# -*- coding: utf-8 -*-
# vim: ft=yaml
#
# Setup variables using grains['os_family'] based logic.
# You just need to add the key:values for an `os_family` that differ
# from `defaults.yaml`.
# Only add an `os_family` which is/will be supported by the formula
#
# If you do not need to provide defaults via the `os_family` grain,
# you will need to provide at least an empty dict in this file, e.g.
# osfamilymap: {}
---
{%- if grains.os == 'MacOS' %}
    {%- set macos_rootuser = salt['cmd.run']("stat -f '%Su' /dev/console") %}
    {%- set macos_rootgroup = salt['cmd.run']("stat -f '%Sg' /dev/console") %}
{%- endif %}

Debian:
  kubectl:
    pkg:
      use_upstream_repo: true
      use_upstream_binary: false
      repo:
        name: deb https://apt.kubernetes.io/ kubernetes-xenial main
        file: /etc/apt/sources.list.d/kubernetes.list
        key_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
  minikube:
    pkg:
      use_upstream_binary: true
      repo:
        name: deb https://apt.kubernetes.io/ kubernetes-xenial main
        file: /etc/apt/sources.list.d/kubernetes.list
        key_url: https://packages.cloud.google.com/apt/doc/apt-key.gpg

RedHat:
  kubectl:
    pkg:
      use_upstream_repo: true
      use_upstream_binary: false
      repo:
        baseurl: 'https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64'
        gpgkey: 'https://packages.cloud.google.com/yum/doc/yum-key.gpg gpgkey2=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg'
        repo_gpgcheck: 1

Suse:
  kubectl:
    pkg:
      use_upstream_repo: false
      use_upstream_binary: true
  minikube:
    pkg:
      use_upstream_repo: false
      use_upstream_binary: true

Gentoo: {}

Arch:
  kubectl:
    linux:
      altpriority: 0
    pkg:
      deps:
        - tar
        - gzip
  minikube:
    linux:
      altpriority: 0
    pkg:
      deps:
        - tar
        - gzip

Alpine: {}

FreeBSD:
  rootgroup: wheel
  kubectl:
    pkg:
      use_upstream_source: true
      use_upstream_repo: false
      use_upstream_binary: false
  minikube:
    pkg:
      use_upstream_source: true
      use_upstream_repo: false
      use_upstream_binary: false

OpenBSD:
  rootgroup: wheel
  kubectl:
    pkg:
      use_upstream_source: true
      use_upstream_repo: false
      use_upstream_binary: false
  minikube:
    pkg:
      use_upstream_source: true
      use_upstream_repo: false
      use_upstream_binary: false

Windows:
  dir:
    binary: C:\\kubernetes
    source: C:\\temp\\kubernetes
  kubectl:
    check: systeminfo
    pkg:
      name: kubectl.exe
      binary:
        source_hash: 974d351e7e0ad1e1ed0901770d65188e8d4c4cdd2494474d14a2b2c325751293
  minikube:
    pkg:
      name: minikube-windows-amd64.exe
      binary:
        source_hash: 426586f33d88a484fdc5a3b326b0651d57860e9305a4f9d4180640e3beccaf6b

MacOS:
  rootuser: {{ macos_rootuser | d('') }}
  rootgroup: {{ macos_rootgroup | d('') }}
  kubectl:
    pkg:
      name: kubernetes-cli         # homebrew
      use_upstream_repo: true      # homebrew
      use_upstream_binary: false   # binary
      binary:
        source_hash: 7b9bdc2dc8604e590052a58456ac648d3afd1b436e609118538a6ffe07579cc6
  minikube:
    check: sysctl -a | grep machdep.cpu.features
    pkg:
      name: minikube               # homebrew
      use_upstream_repo: false     # homebrew
      use_upstream_binary: true    # binary
      binary:
        source_hash: f27016246850b3145e1509e98f7ed060fd9575ac4d455c7bdc15277734372e85
